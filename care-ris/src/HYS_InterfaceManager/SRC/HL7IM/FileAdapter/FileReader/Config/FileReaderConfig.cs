using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using HYS.IM.Messaging.Base.Config;
using HYS.IM.Messaging.Base;
using HYS.Common.Xml;
using HYS.IM.Messaging.Registry;
using HYS.IM.Messaging.Mapping.Transforming;
using HYS.IM.Common.HL7v2.Xml;

namespace HYS.IM.MessageDevices.FileAdapter.FileReader.Config
{
    public partial class FileReaderConfig : EntityConfigBase
    {
        public const string DEVICE_NAME = "FILE_READER";
        public const string CONFIG_FILE_NAME = "FileReaderConfig.xml";

        public FileReaderConfig()
        {
            LoadDefaultConfiguration();
        }
        private void LoadDefaultConfiguration()
        {
            // Identity 

            EntityID = Guid.NewGuid();
            Description = "File Reader";
            DeviceName = DEVICE_NAME;
            Name = Program.Context.AppName;

            // Default Transferring(routing) Contract

            Interaction = InteractionTypes.Publisher;
            Direction = DirectionTypes.Inbound;
            PublishConfig.Publication.MessageTypeList.Add(MessageRegistry.GENERIC_NotificationMessageType);
            SubscribeConfig = null;
            ResponseConfig = null;
            RequestConfig = null;

            // Other Default Configuration

            FileInboundFolder = "C:\\FILEIN";
            FileOutboundFolder = "C:\\FILEOUT";
            MessageProcessingType = MessageProcessType.HL7v2XML;
            FileExtension = ".INI";
            SourceFileDisposeType = FileDisposeType.Move;
            EncodeName = "GB18030";
            TimerInterval = 3000;
            HL7XMLTransformerType = NHL7ToolkitTransformer.DEVICE_NAME;
            InboundMessageDispatching.Model = MessageDispatchModel.Publish;
        }

        /// <summary>
        /// Read requesting message from this folder.
        /// </summary>
        [XCData(true)]
        public string FileInboundFolder { get; set; }
        /// <summary>
        /// Write response/acknowledgement message to this folder.
        /// </summary>
        [XCData(true)]
        public string FileOutboundFolder { get; set; }
        /// <summary>
        /// Whether need to write response/acknowledgement message to outbound folder.
        /// </summary>
        public FileDisposeType SourceFileDisposeType { get; set; }
        [XCData(true)]
        public string EncodeName { get; set; }
        [XCData(true)]
        public MessageProcessType MessageProcessingType { get; set; }
        [XCData(true)]
        public Double TimerInterval { get; set; }
        [XCData(true)]
        public string FileExtension { get; set; }
        public string HL7XMLTransformerType { get; set; }

        private MessageDispatchConfig _messageDispatchConfig = new MessageDispatchConfig();
        public MessageDispatchConfig InboundMessageDispatching
        {
            get { return _messageDispatchConfig; }
            set { _messageDispatchConfig = value; }
        }
    }

    public enum MessageProcessType
    {
        /// <summary>
        /// Assume receiving HL7v2 text message, 
        /// and send publishing and requesting XDSGW message to the framework with raw HL7v2 text in it.
        /// </summary>
        HL7v2Text = 0,
        /// <summary>
        /// Assume receiving HL7v2 text message, 
        /// and send publishing and requesting XDSGW message to the framework contains HL7v2 XML in it,
        /// and the XML is generated by XmlTransformer in Common.HL7v2 namespace.
        /// </summary>
        HL7v2XML = 1,
        /// <summary>
        /// Assume receiving other type of XML message (including HL7v3 XML and non-standard XML), 
        /// and send publishing and requesting XDSGW message to the framework contains the XML in it.
        /// </summary>
        OtherXML = 2,
    }

    /// <summary>
    /// Define how to deal with the file when the message is processed.
    /// </summary>
    public enum FileDisposeType
    {
        Delete,
        Move
    }

    public enum MessageDispatchModel
    {
        Publish,        // dispatch message to XDSGW publisher
        Request,        // dispatch message to XDSGW requester
        Custom,         // dispatch message to XDSGW publisher or requester according to message content
    }

    public class MessageDispatchConfig : XObject
    {
        public MessageDispatchModel Model { get; set; }

        [XCData(true)]
        public string CriteriaXPath { get; set; }
        [XCData(true)]
        public string CriteriaXPathPrefixDefinition { get; set; }
        [XCData(true)]
        public string CriteriaPublishValueExpression { get; set; }
        [XCData(true)]
        public string CriteriaRequestValueExpression { get; set; }
    }
}
