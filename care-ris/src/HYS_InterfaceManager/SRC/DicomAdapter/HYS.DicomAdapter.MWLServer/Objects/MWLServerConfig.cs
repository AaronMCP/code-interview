using System;
using System.Collections.Generic;
using HYS.Common.Xml;
using HYS.Common.Dicom;
using HYS.Common.Dicom.Net;
using HYS.Common.Objects.Rule;
using HYS.DicomAdapter.Common;

namespace HYS.DicomAdapter.MWLServer.Objects
{
    public class MWLServerConfig : XObject
    {
        private bool _dumpDicomData;
        public bool DumpDicomData
        {
            get { return _dumpDicomData; }
            set { _dumpDicomData = value; }
        }

        private bool _splitCodeValue = false;
        public bool SplitCodeValue
        {
            get { return _splitCodeValue; }
            set { _splitCodeValue = value; }
        }

        private char _codeValueSeperator = '^';
        public char CodeValueSeperator
        {
            get { return _codeValueSeperator; }
            set { _codeValueSeperator = value; }
        }

        private string _codeValueColumnName = "";
        public string CodeValueColumnName
        {
            get { return _codeValueColumnName; }
            set { _codeValueColumnName = value; }
        }

        // 20100227
        // support appending an ascending number to a specific field 
        // when splitting one record, which has multiple values in procedure code field,
        // into multiple records, each has a different procedure code.

        private bool _appendNumberToColumndAccordingToCodeValueSplitting = false;
        public bool AppendNumberToColumnAccordingToCodeValueSplitting
        {
            get { return _appendNumberToColumndAccordingToCodeValueSplitting; }
            set { _appendNumberToColumndAccordingToCodeValueSplitting = value; }
        }

        private string _theColumndAppendedNumberToAccordingToCodeValueSplitting = "";
        public string TheColumndAppendedNumberToAccordingToCodeValueSplitting
        {
            get { return _theColumndAppendedNumberToAccordingToCodeValueSplitting; }
            set { _theColumndAppendedNumberToAccordingToCodeValueSplitting = value; }
        }

        private bool _mergeElementList = false;
        public bool MergeElementList
        {
            get { return _mergeElementList; }
            set { _mergeElementList = value; }
        }

        private string _primaryKeyColumnName = "";
        public string PrimaryKeyColumnName
        {
            get { return _primaryKeyColumnName; }
            set { _primaryKeyColumnName = value; }
        }

        private string _gwDataDBConnection = "";
        public string GWDataDBConnection
        {
            get { return _gwDataDBConnection; }
            set { _gwDataDBConnection = value; }
        }

        private bool _sendCharacterSetTag = true;
        public bool SendCharacterSetTag
        {
            get { return _sendCharacterSetTag; }
            set { _sendCharacterSetTag = value; }
        }

        private bool _autoGenerateRPID;
        public bool AutoGenerateRPID
        {
            get { return _autoGenerateRPID; }
            set { _autoGenerateRPID = value; }
        }

        private bool _autoGenerateSPSID;
        public bool AutoGenerateSPSPID
        {
            get { return _autoGenerateSPSID; }
            set { _autoGenerateSPSID = value; }
        }

        private bool _autoGenerateSTDUID;
        public bool AutoGenerateSTDUID
        {
            get { return _autoGenerateSTDUID; }
            set { _autoGenerateSTDUID = value; }
        }

        private bool _lookupAETitleByIPInModalityListForScheduledStationAETitle;
        public bool LookupAETitleByIPInModalityListForScheduledStationAETitle
        {
            get { return _lookupAETitleByIPInModalityListForScheduledStationAETitle; }
            set { _lookupAETitleByIPInModalityListForScheduledStationAETitle = value; }
        }

        private bool _lookupDescriptionByIPInModalityListForScheduledStationName;
        public bool LookupDescriptionByIPInModalityListForScheduledStationName
        {
            get { return _lookupDescriptionByIPInModalityListForScheduledStationName; }
            set { _lookupDescriptionByIPInModalityListForScheduledStationName = value; }
        }

        // 20100227
        // if you want to append an ascending number to the RPID, SPSID or STDUID field when spliting procedure codes 
        // (see the setting AppendNumberToFieldAccordingToCodeValueSplitting for details),
        // please reduce the length of the auto generated value of these fields.

        private int _maxAutoGeneratedLengthOfRPIDAndSPSID = 16; // should better always be longer than 10, see the function HYS.DicomAdapter.MWLServer.Dicom.GetRandomNumber() for details.
        public int MaxAutoGeneratedLengthOfRPIDAndSPSID
        {
            get { return _maxAutoGeneratedLengthOfRPIDAndSPSID; }
            set { _maxAutoGeneratedLengthOfRPIDAndSPSID = value; }
        }

        private int _maxAutoGeneratedLengthOfSTDUID = 64;   // should better always be longer than 55, see the function HYS.Common.Dicom.DHelper.GetDicomGUID() for details.
        public int MaxAutoGeneratedLengthOfSTDUID
        {
            get { return _maxAutoGeneratedLengthOfSTDUID; }
            set { _maxAutoGeneratedLengthOfSTDUID = value; }
        }

        private SCPConfig _scpConfig = new SCPConfig();
        public SCPConfig SCPConfig
        {
            get { return _scpConfig; }
            set { _scpConfig = value; }
        }

        private OutboundRule<MWLQueryCriteriaItem, MWLQueryResultItem> _rule = new OutboundRule<MWLQueryCriteriaItem, MWLQueryResultItem>();
        public OutboundRule<MWLQueryCriteriaItem, MWLQueryResultItem> Rule
        {
            get { return _rule; }
            set { _rule = value; }
        }

        private int _csDivisionMAXCount = 5;
        public int CSDivisionMAXCount
        {
            get { return _csDivisionMAXCount; }
            set { _csDivisionMAXCount = value; }
        }

        private char _csDivisionSeperator = ',';
        public char CSDivisionSeperator
        {
            get { return _csDivisionSeperator; }
            set { _csDivisionSeperator = value; }
        }

        private PersonNameRule _personNameRule = new PersonNameRule();
        public PersonNameRule PersonNameRule
        {
            get { return _personNameRule; }
            set { _personNameRule = value; }
        }

        private string _characterSetName = "GB18030";
        public string CharacterSetName
        {
            get { return _characterSetName; }
            set { _characterSetName = value; }
        }

        private string _affectedUID = "";
        public string AffectedUID
        {
            get { return _affectedUID; }
            set { _affectedUID = value; }
        }

        private XCollection<PrivateTag> _privateTagList = new XCollection<PrivateTag>();
        public XCollection<PrivateTag> PrivateTagList
        {
            get { return _privateTagList; }
            set { _privateTagList = value; }
        }
        public void UpdatePrivateTagList()
        {
            Dictionary<string, PrivateTag> dic = new Dictionary<string, PrivateTag>();

            foreach (MWLQueryCriteriaItem qcItem in Rule.QueryCriteria.MappingList)
            {
                if (qcItem.DPath.Type != DPathType.Normal) continue;
                int tag = qcItem.DPath.GetTag();
                if (PrivateTagHelper.IsPrivateTag(tag))
                {
                    string strTag = DHelper.Int2HexString(tag);
                    if (!dic.ContainsKey(strTag))
                        dic.Add(strTag, new PrivateTag(strTag, qcItem.DPath.VR));
                }
            }

            // do not keep manually added item, refresh the whole private tag list

            //if (PrivateTagList != null)
            //{
            //    foreach (PrivateTag tag in PrivateTagList)
            //    {
            //        string strTag = tag.Tag;
            //        if (!dic.ContainsKey(strTag))
            //        {
            //            dic.Add(strTag, tag);
            //        }
            //    }
            //}

            XCollection<PrivateTag> xlist = new XCollection<PrivateTag>();
            foreach (KeyValuePair<string, PrivateTag> p in dic) xlist.Add(p.Value);
            PrivateTagList = xlist;
        }

        private XCollection<MWLQueryCriteriaItem> _additionalQueryCriteria = new XCollection<MWLQueryCriteriaItem>();
        public XCollection<MWLQueryCriteriaItem> AdditionalQueryCriteria
        {
            get { return _additionalQueryCriteria; }
            set { _additionalQueryCriteria = value; }
        }

        private QueryCriteriaType _additionalQueryCriteriaJoinType = QueryCriteriaType.And;
        public QueryCriteriaType AdditionalQueryCriteriaJoinType
        {
            get { return _additionalQueryCriteriaJoinType; }
            set { _additionalQueryCriteriaJoinType = value; }
        }

        private bool _transformQueryResultByMWLTemplate = false;
        public bool TransformQueryResultByMWLTemplate
        {
            get { return _transformQueryResultByMWLTemplate; }
            set { _transformQueryResultByMWLTemplate = value; }
        }

        private DPersonNameEncodingRule _personNameEncodingRule = new DPersonNameEncodingRule();
        public DPersonNameEncodingRule PersonNameEncodingRule
        {
            get { return _personNameEncodingRule; }
            set { _personNameEncodingRule = value; }
        }
    }
}
